import React, { Component } from 'react';
import {StyleSheet, Text, View, Image} from 'react-native';
import { graphql } from 'react-apollo';
import SwipeCards from 'react-native-swipe-cards';

import getCompetencyData from '../../../data/queries/getCompetencyData';
import { getObjectById, reformatArrayByLevel } from '../../../assets/customFunctions';

const Card = (props) => (
    <View style={styles.card}>
        <Text>{props.description}</Text>
      </View>
)

const NoMoreCards = (props) => (
    <View>
        <Text style={styles.noMoreCardsText}>No more cards</Text>
    </View>
)

const Cards = [
  {text: 'Tomato', backgroundColor: 'red'},
  {text: 'Aubergine', backgroundColor: 'purple'},
  {text: 'Courgette', backgroundColor: 'green'},
  {text: 'Blueberry', backgroundColor: 'blue'},
  {text: 'Umm...', backgroundColor: 'cyan'},
  {text: 'orange', backgroundColor: 'orange'},
]

class EvaluationStack extends Component {
    constructor() {
        super();
        this.state = { 
            displayedCards: [],
            milestoneData: [],
            currentLevelLength: [],
            milestoneIndex: 0,
            achievedAtCurrentLvl: 0,
            payload: []
        }

        this.handleNope = this.handleNope.bind(this);
        this.handleYup = this.handleYup.bind(this);
        this.cardRemoved = this.cardRemoved.bind(this);
    }

    static navigationOptions = {
        title: 'Evaluate'
    }

    // Add asynchronous data to state when component loaded
    componentWillReceiveProps(nextProps) {
        const { loading } = nextProps.data;
        if (loading) { return }
        const { milestones } = nextProps.data.Competency;
        
        //reformats the milestones response object to a array organized by level
        const milestonesByLevel = reformatArrayByLevel(milestones);
        console.log('MilestoneData ', milestonesByLevel)
        this.setState({
            milestoneData: milestonesByLevel,
            displayedCards: milestonesByLevel[1],
            currentLevelLength: milestonesByLevel[1].length
        })
    }

    cardRemoved(index) {
        const { achievedAtCurrentLvl, currentLevelLength, displayedCards, milestoneIndex, payload } = this.state;
        if (achievedAtCurrentLvl === currentLevelLength) {
            console.log(`Level ${milestoneIndex + 1} achieved`);
            this.advanceLevel();
        } else if (!displayedCards.length) {
            console.log('Payload to submit to server: ', payload);
        }
    }

    handleYup (card) {
        console.log(`Yup for ${card.description}`)
        var { payload, displayedCards, achievedAtCurrentLvl } = this.state;
        const { competency, currentUser, evaluatedUser } = this.props.navigation.state.params;
        const evaluatingUser = currentUser.id;
        const milestone = card.id;
        const achieved = true;

        // Filters out the submitted milestone evaluated
        const milestoneObject = getObjectById(milestone, displayedCards);
        const filteredMilestones = displayedCards.filter(value => value !== milestoneObject);
        this.setState({displayedCards: filteredMilestones});

        // Change state for achieved milestones
        payload.push({milestone, achieved, evaluatedUser: evaluatedUser.id, evaluatingUser});
        this.setState({
            achievedAtCurrentLvl: achievedAtCurrentLvl + 1,
            payload
        });
    }

    handleNope (card) {
        console.log(`Nope for ${card.description}`)
        console.log(this.state);
    }

    handleMaybe (card) {
        console.log(`Maybe for ${card.text}`)
    }

    advanceLevel () {
        const { milestoneIndex, milestoneData } = this.state;
        const newIndex = milestoneIndex + 1;

        // Exit function if there are no more levels
        if (!milestoneData[newIndex]) { 
            console.log('Completed all levels');
            this.submitPayload();
            return; 
        }

        this.setState({
            displayedCards: this.state.displayedCards.concat(milestoneData[newIndex]),
            milestoneIndex: newIndex,
            currentLevelLength: milestoneData[newIndex].length,
            achievedAtCurrentLvl: 0
        })
    }
    
    render() {
        const { competency, currentUser, evaluatedUser } = this.props.navigation.state.params;
        // console.log('Competency: ',competency);
        // console.log('Current User', currentUser);
        // console.log('Evaluated User', evaluatedUser);
        return (
        <SwipeCards
            cards={this.state.displayedCards}

            renderCard={(cardData) => <Card {...cardData} />}
            renderNoMoreCards={() => <NoMoreCards />}
            
            showYup={true}
            showNope={true}

            handleYup={this.handleYup}
            handleNope={this.handleNope}
            handleMaybe={this.handleMaybe}
            hasMaybeAction={true}
            cardRemoved={this.cardRemoved}
        />
        )
    }
}

const styles = StyleSheet.create({
  card: {
    flex: 1,
    flexBasis: 300,
    flexGrow: 0,
    width: 300,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: 'white',
    shadowColor: 'black',
    shadowOffset: {width: 2, height: 2},
    shadowOpacity: 0.5,
    shadowRadius: 5
  },
  noMoreCardsText: {
    fontSize: 22,
  }
})

export default graphql(getCompetencyData, {
    options: ({navigation}) => ({ variables: { competencyId: navigation.state.params.competency.id }})
})(EvaluationStack)